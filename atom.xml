<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Explorer</title>
  <subtitle>探索者</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://shihd.github.io/"/>
  <updated>2017-05-16T02:38:11.000Z</updated>
  <id>http://shihd.github.io/</id>
  
  <author>
    <name>Shihd</name>
    <email>magicshd@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>技术资料————解析99行代码的在线电子表格</title>
    <link href="http://shihd.github.io/2017/05/16/%E6%8A%80%E6%9C%AF%E8%B5%84%E6%96%99%E2%80%94%E2%80%94%E8%A7%A3%E6%9E%9099%E8%A1%8C%E4%BB%A3%E7%A0%81%E7%9A%84%E5%9C%A8%E7%BA%BF%E7%94%B5%E5%AD%90%E8%A1%A8%E6%A0%BC/"/>
    <id>http://shihd.github.io/2017/05/16/技术资料——解析99行代码的在线电子表格/</id>
    <published>2017-05-16T02:36:14.000Z</published>
    <updated>2017-05-16T02:38:11.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="解析99行代码的在线电子表格（Web-Spreadsheet-in-99-lines"><a href="#解析99行代码的在线电子表格（Web-Spreadsheet-in-99-lines" class="headerlink" title="解析99行代码的在线电子表格（Web Spreadsheet in 99 lines)"></a>解析99行代码的在线电子表格（Web Spreadsheet in 99 lines)</h1><h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>随着浏览器运行性能及前端技术的日新月异，对于使用在线表格做报表已经成为时下主流趋势，而在线电子表格也层出不穷，如Google的SpreadSheet等，由于公司报表类产品中需要使用在线电子表格，并且要在基本的电子表格控件上增加许多额外与业务相关的扩展，因此在咨询及使用过一些通用工具后决定自己造轮子。造轮子之前先学习前人的经验，如何设计在线电子表格。为了入门我们先选择了本文将介绍的这个99行代码完成的在线电子表格。</p>
<h2 id="99行代码的电子表格简介"><a href="#99行代码的电子表格简介" class="headerlink" title="99行代码的电子表格简介"></a>99行代码的电子表格简介</h2><ul>
<li><strong>作者</strong>：audreyt</li>
<li><strong>源码地址：</strong> <a href="http://jsfiddle.net/audreyt/LtDyP/" target="_blank" rel="external">http://jsfiddle.net/audreyt/LtDyP/</a></li>
<li><strong>使用技术：</strong> HTML5+CSS3+AngularJS1.x</li>
<li><strong>主界面截图:</strong> <img src="http://omunsjl7p.bkt.clouddn.com/99SpreadSheetIndex.PNG" alt=""><a id="more"></a>
<h2 id="绘制表格的方法"><a href="#绘制表格的方法" class="headerlink" title="绘制表格的方法"></a>绘制表格的方法</h2><strong>1 定义行数组（<code>Rows</code>）与列数组（<code>Cols</code>）</strong><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$scope.Cols = [], $scope.Rows = [];</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>2 初始化数组</strong></p>
<ul>
<li>将列数组（<code>Cols</code>）初始化为<code>[&#39;A&#39;,&#39;B&#39;,&#39;C&#39;,&#39;D&#39;,&#39;E&#39;,&#39;F&#39;,&#39;G&#39;,&#39;H&#39;]</code></li>
<li><p>将行数组（<code>Rows</code>）初始化为<code>[1,2,3,4,...,18,19,20]</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">makeRange($scope.Cols, <span class="string">'A'</span>, <span class="string">'H'</span>);</div><div class="line">makeRange($scope.Rows, <span class="number">1</span>, <span class="number">20</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>其中<code>makeRange(array, cur, end)</code>函数的作用就是根据<code>cur</code>至<code>end</code>之间的范围初始化给<code>array</code>数组，源码如下：</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeRange</span>(<span class="params">array, cur, end</span>) </span>&#123;</div><div class="line">  <span class="keyword">while</span> (cur &lt;= end) &#123;</div><div class="line">    array.push(cur);</div><div class="line">    <span class="comment">// If it’s a number, increase it by one; otherwise move to next letter</span></div><div class="line">    cur = (<span class="built_in">isNaN</span>( cur ) ? <span class="built_in">String</span>.fromCharCode(cur.charCodeAt()+<span class="number">1</span> ) : cur+<span class="number">1</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>3 绑定页面元素</strong></p>
<ul>
<li><p>利用AngularJS的双向数据绑定特性，将Javascript变量与页面元素进行绑定</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">ng-click</span>=<span class="string">"reset();calc()"</span>&gt;</span>↻<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">th</span> <span class="attr">ng-repeat</span>=<span class="string">"col in Cols"</span>&gt;</span>&#123;&#123; col &#125;&#125;<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">tr</span> <span class="attr">ng-repeat</span>=<span class="string">"row in Rows"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>&#123;&#123; row &#125;&#125;<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">ng-repeat</span>=<span class="string">"col in Cols"</span> <span class="attr">ng-class</span>=<span class="string">"&#123; formula: ( '=' === sheet[col+row][0] ) &#125;"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"&#123;&#123; col+row &#125;&#125;"</span> <span class="attr">ng-model</span>=<span class="string">"sheet[col+row]"</span> <span class="attr">ng-change</span>=<span class="string">"calc()"</span> <span class="attr">ng-model-options</span>=<span class="string">"&#123; debounce: 200 &#125;"</span> <span class="attr">ng-keydown</span>=<span class="string">"keydown( $event, col, row )"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div></pre></td></tr></table></figure>
<p>通过该HTML代码可以了解，其实表格是通过<code>&lt;table&gt;</code>标签实现的，其中的单元格就是<code>&lt;input&gt;</code>文本框，通过行列的循环（<code>ng-repeat</code>）绘制出一张电子表格。</p>
<p><img src="http://omunsjl7p.bkt.clouddn.com/99SpreadSheetTable.PNG" alt=""></p>
</li>
<li><p>列头为表格第一行，列头第一个元素是一个刷新按钮，其余通过循环(<code>ng-repeat</code>)列数组（<code>Cols</code>）绘制，并将数组元素值作为元素显示内容</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">th</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">ng-click</span>=<span class="string">"reset();calc()"</span>&gt;</span>↻<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">th</span> <span class="attr">ng-repeat</span>=<span class="string">"col in Cols"</span>&gt;</span>&#123;&#123; col &#125;&#125;<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>第二行开始绘制表格内单元格，首先按行数组（<code>Rows</code>）进行循环(<code>ng-repeat</code>)，然后在单个行循环体内，第一个列作为行头，显示行数组的值作为行号，其余通过循环(<code>ng-repeat</code>)列数组（<code>Cols</code>）并插入<code>&lt;input&gt;</code>文本框，并将列号加行号的组合字符串赋值给该单元格ID属性</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">ng-repeat</span>=<span class="string">"row in Rows"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">th</span>&gt;</span>&#123;&#123; row &#125;&#125;<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span> <span class="attr">ng-repeat</span>=<span class="string">"col in Cols"</span> <span class="attr">ng-class</span>=<span class="string">"&#123; formula: ( '=' === sheet[col+row][0] ) &#125;"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"&#123;&#123; col+row &#125;&#125;"</span> <span class="attr">ng-model</span>=<span class="string">"sheet[col+row]"</span> <span class="attr">ng-change</span>=<span class="string">"calc()"</span> <span class="attr">ng-model-options</span>=<span class="string">"&#123; debounce: 200 &#125;"</span> <span class="attr">ng-keydown</span>=<span class="string">"keydown( $event, col, row )"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>如此，一张电子表格就绘制完成</p>
<h2 id="单元格添加键盘事件"><a href="#单元格添加键盘事件" class="headerlink" title="单元格添加键盘事件"></a>单元格添加键盘事件</h2><ul>
<li><p>HTML中<code>&lt;input&gt;</code>标签上声明键盘按下事件（<code>ng-keydown</code>）</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"&#123;&#123; col+row &#125;&#125;"</span> <span class="attr">ng-model</span>=<span class="string">"sheet[col+row]"</span> <span class="attr">ng-change</span>=<span class="string">"calc()"</span> <span class="attr">ng-model-options</span>=<span class="string">"&#123; debounce: 200 &#125;"</span> <span class="attr">ng-keydown</span>=<span class="string">"keydown( $event, col, row )"</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>JS中实现<code>keydown( $event, col, row )</code>方法</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// UP(38) and DOWN(40)/ENTER(13) move focus to the row above (-1) and below (+1).</span></div><div class="line">$scope.keydown = <span class="function"><span class="keyword">function</span>(<span class="params">event, col, row</span>) </span>&#123;  </div><div class="line">  <span class="keyword">switch</span>(event.which) &#123;</div><div class="line">    <span class="keyword">case</span> <span class="number">38</span>: <span class="keyword">case</span> <span class="number">40</span>: <span class="keyword">case</span> <span class="number">13</span>: $timeout( <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">var</span> direction = (event.which === <span class="number">38</span>) ? <span class="number">-1</span> : +<span class="number">1</span>;</div><div class="line">      <span class="keyword">var</span> cell = <span class="built_in">document</span>.querySelector( <span class="string">'#'</span> + col + (row + direction) );</div><div class="line">      <span class="keyword">if</span> (cell) &#123;</div><div class="line">        cell.focus();</div><div class="line">      &#125;</div><div class="line">    &#125; );</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>如果当键盘按下“上”键（键值：38），则根据单元格ID属性找到上方第一个一个单元格，并使其成为焦点（focus）；如果当键盘按下“下”键（键值：40）或“回车”键（键值：13），则根据单元格ID属性找到下方一个单元格，并使其成为焦点（focus）。</p>
<h2 id="表格的数值存储"><a href="#表格的数值存储" class="headerlink" title="表格的数值存储"></a>表格的数值存储</h2><ul>
<li><p>在Javascript代码中声明<code>sheet</code>对象</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Restore the previous .sheet</span></div><div class="line">$scope.sheet = angular.fromJson( localStorage.getItem( <span class="string">''</span> ) );</div></pre></td></tr></table></figure>
</li>
<li><p>在HTML中<code>&lt;input&gt;</code>文本框标签内绑定（<code>ng-model</code>）<code>sheet</code>变量</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"&#123;&#123; col+row &#125;&#125;"</span> <span class="attr">ng-model</span>=<span class="string">"sheet[col+row]"</span> <span class="attr">ng-change</span>=<span class="string">"calc()"</span> <span class="attr">ng-model-options</span>=<span class="string">"&#123; debounce: 200 &#125;"</span> <span class="attr">ng-keydown</span>=<span class="string">"keydown( $event, col, row )"</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p><code>sheet</code>对象中存储形式为键值对，如<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$scope.sheet = &#123; <span class="attr">B1</span>: <span class="number">1874</span>, <span class="attr">A2</span>: <span class="string">'+'</span>, <span class="attr">B2</span>: <span class="number">2046</span>, <span class="attr">A3</span>: <span class="string">'⇒'</span>, <span class="attr">B3</span>: <span class="string">'=B1+B2'</span> &#125;;</div></pre></td></tr></table></figure></p>
<p>其中键为单元格ID属性，即行+列组合的字符串，值为单元格值。</p>
<h2 id="表格的运算过程"><a href="#表格的运算过程" class="headerlink" title="表格的运算过程"></a>表格的运算过程</h2><ul>
<li><p>表格计算通过Web Workers开启计算线程完成</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$scope.worker = <span class="keyword">new</span> Worker(<span class="string">"/echo/js/?js="</span>+<span class="built_in">encodeURIComponent</span>(<span class="string">"("</span> + WorkerJS.toString() + <span class="string">")()"</span>));</div></pre></td></tr></table></figure>
</li>
<li><p>具体计算方法写在<code>WorkerJS()</code>函数内</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Worker.js</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">WorkerJS</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> sheet, errs, vals;</div><div class="line">  self.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">message</span>) </span>&#123;</div><div class="line">    sheet = message.data, errs = &#123;&#125;, vals = &#123;&#125;;</div><div class="line"></div><div class="line">    <span class="built_in">Object</span>.getOwnPropertyNames(sheet || &#123;&#125;).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">coord</span>) </span>&#123;</div><div class="line">      <span class="comment">// Four variable names pointing to the same coordinate: A1, a1, $A1, $a1</span></div><div class="line">      [ <span class="string">''</span>, <span class="string">'$'</span> ].forEach(<span class="function"><span class="keyword">function</span>(<span class="params">p</span>) </span>&#123; [ coord, coord.toLowerCase() ].forEach(<span class="function"><span class="keyword">function</span>(<span class="params">c</span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> name = p+c;</div><div class="line"></div><div class="line">        <span class="comment">// Worker is reused across computations, so only define each variable once</span></div><div class="line">        <span class="keyword">if</span> ((<span class="built_in">Object</span>.getOwnPropertyDescriptor( self, name ) || &#123;&#125;).get) &#123; <span class="keyword">return</span>; &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Define self['A1'], which is the same thing as the global variable A1</span></div><div class="line">        <span class="built_in">Object</span>.defineProperty( self, name, &#123; <span class="attr">get</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">          <span class="keyword">if</span> (coord <span class="keyword">in</span> vals) &#123; <span class="keyword">return</span> vals[coord]; &#125;</div><div class="line">          vals[coord] = <span class="literal">NaN</span>;</div><div class="line"></div><div class="line">          <span class="comment">// Turn numeric strings into numbers, so =A1+C1 works when both are numbers</span></div><div class="line">          <span class="keyword">var</span> x = +sheet[coord];</div><div class="line">          <span class="keyword">if</span> (sheet[coord] !== x.toString()) &#123; x = sheet[coord]; &#125;</div><div class="line"></div><div class="line">          <span class="comment">// Evaluate formula cells that begin with =</span></div><div class="line">          <span class="keyword">try</span> &#123; vals[coord] = ((<span class="string">'='</span> === x[<span class="number">0</span>]) ? <span class="built_in">eval</span>.call( <span class="literal">null</span>, x.slice( <span class="number">1</span> ) ) : x);</div><div class="line">          &#125; <span class="keyword">catch</span> (e) &#123;</div><div class="line">            <span class="keyword">var</span> match = <span class="regexp">/\$?[A-Za-z]+[1-9][0-9]*\b/</span>.exec( e );</div><div class="line">            <span class="keyword">if</span> (match &amp;&amp; !( match[<span class="number">0</span>] <span class="keyword">in</span> self )) &#123;</div><div class="line">              <span class="comment">// The formula refers to a uninitialized cell; set it to 0 and retry</span></div><div class="line">              self[match[<span class="number">0</span>]] = <span class="number">0</span>;</div><div class="line">              <span class="keyword">delete</span> vals[coord];</div><div class="line">              <span class="keyword">return</span> self[coord];</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// Otherwise, stringify the caught exception in the errs object</span></div><div class="line">            errs[coord] = e.toString();</div><div class="line">          &#125;</div><div class="line">          <span class="comment">// Turn vals[coord] into a string if it's not a number or boolean</span></div><div class="line">          <span class="keyword">switch</span> (<span class="keyword">typeof</span> vals[coord]) &#123; <span class="keyword">case</span> <span class="string">'function'</span>: <span class="keyword">case</span> <span class="string">'object'</span>: vals[coord]+=<span class="string">''</span>; &#125;</div><div class="line">          <span class="keyword">return</span> vals[coord];</div><div class="line">        &#125; &#125; );</div><div class="line">      &#125;); &#125;);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="comment">// For each coordinate in the sheet, call the property getter defined above</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> coord <span class="keyword">in</span> sheet) &#123; self[coord]; &#125;</div><div class="line">    postMessage([ errs, vals ]);</div><div class="line">  &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>计算流程为<br><img src="http://omunsjl7p.bkt.clouddn.com/99SpreadSheetCaculate.PNG" alt=""></p>
</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>经过分析，99行实现的该电子表格虽然功能简单，但是基本的表格绘制及运算实现了，为我们未来设计电子表格结构提供了重要的参考价值。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;解析99行代码的在线电子表格（Web-Spreadsheet-in-99-lines&quot;&gt;&lt;a href=&quot;#解析99行代码的在线电子表格（Web-Spreadsheet-in-99-lines&quot; class=&quot;headerlink&quot; title=&quot;解析99行代码的在线电子表格（Web Spreadsheet in 99 lines)&quot;&gt;&lt;/a&gt;解析99行代码的在线电子表格（Web Spreadsheet in 99 lines)&lt;/h1&gt;&lt;h2 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h2&gt;&lt;p&gt;随着浏览器运行性能及前端技术的日新月异，对于使用在线表格做报表已经成为时下主流趋势，而在线电子表格也层出不穷，如Google的SpreadSheet等，由于公司报表类产品中需要使用在线电子表格，并且要在基本的电子表格控件上增加许多额外与业务相关的扩展，因此在咨询及使用过一些通用工具后决定自己造轮子。造轮子之前先学习前人的经验，如何设计在线电子表格。为了入门我们先选择了本文将介绍的这个99行代码完成的在线电子表格。&lt;/p&gt;
&lt;h2 id=&quot;99行代码的电子表格简介&quot;&gt;&lt;a href=&quot;#99行代码的电子表格简介&quot; class=&quot;headerlink&quot; title=&quot;99行代码的电子表格简介&quot;&gt;&lt;/a&gt;99行代码的电子表格简介&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作者&lt;/strong&gt;：audreyt&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;源码地址：&lt;/strong&gt; &lt;a href=&quot;http://jsfiddle.net/audreyt/LtDyP/&quot;&gt;http://jsfiddle.net/audreyt/LtDyP/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;使用技术：&lt;/strong&gt; HTML5+CSS3+AngularJS1.x&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;主界面截图:&lt;/strong&gt; &lt;img src=&quot;http://omunsjl7p.bkt.clouddn.com/99SpreadSheetIndex.PNG&quot; alt=&quot;&quot;&gt;
    
    </summary>
    
      <category term="技术资料" scheme="http://shihd.github.io/categories/%E6%8A%80%E6%9C%AF%E8%B5%84%E6%96%99/"/>
    
    
  </entry>
  
  <entry>
    <title>工作资料-报表系统业务需求</title>
    <link href="http://shihd.github.io/2017/05/16/%E5%B7%A5%E4%BD%9C%E8%B5%84%E6%96%99-%E6%8A%A5%E8%A1%A8%E7%B3%BB%E7%BB%9F%E4%B8%9A%E5%8A%A1%E9%9C%80%E6%B1%82/"/>
    <id>http://shihd.github.io/2017/05/16/工作资料-报表系统业务需求/</id>
    <published>2017-05-16T02:23:16.000Z</published>
    <updated>2017-05-16T02:25:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="报表系统业务需求"><a href="#报表系统业务需求" class="headerlink" title="报表系统业务需求"></a>报表系统业务需求</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>本系统作为综合统计平台子系统，主要作用是通过数据源生成报表数据，并支持将生成好的报表数据提供给下游报送类系统使用。</p>
<p><img src="http://omunsjl7p.bkt.clouddn.com/bbxt_scope.jpg" alt=""></p>
<h2 id="功能概览"><a href="#功能概览" class="headerlink" title="功能概览"></a>功能概览</h2><table>
<thead>
<tr>
<th style="text-align:left">功能</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">报表管理</td>
<td style="text-align:left">管理报表模板</td>
</tr>
<tr>
<td style="text-align:left">模板定义</td>
<td style="text-align:left">定义报表表样及取数</td>
</tr>
<tr>
<td style="text-align:left">报表生成</td>
<td style="text-align:left">计算生成报表</td>
</tr>
<tr>
<td style="text-align:left">报表检索</td>
<td style="text-align:left">提供生成完成的报表数据的查询检索及导出</td>
</tr>
</tbody>
</table>
<a id="more"></a>
<h2 id="系统主流程"><a href="#系统主流程" class="headerlink" title="系统主流程"></a>系统主流程</h2><p><img src="http://omunsjl7p.bkt.clouddn.com/bbxt_flow.jpg" alt=""></p>
<h2 id="功能详述"><a href="#功能详述" class="headerlink" title="功能详述"></a>功能详述</h2><h3 id="报表管理"><a href="#报表管理" class="headerlink" title="报表管理"></a>报表管理</h3><ol>
<li>支持报表模板的新增、编辑及删除</li>
<li>模板支持历史版本追踪</li>
</ol>
<h3 id="模板定义"><a href="#模板定义" class="headerlink" title="模板定义"></a>模板定义</h3><ol>
<li>支持在线编辑电子表格</li>
<li>支持表样设计</li>
<li>支持载入Excel设计表样</li>
<li>支持指标映射取数定义</li>
<li>支持多数据源接入（本次可不考虑）</li>
<li>支持数据集及取数配置</li>
<li>自动生成与指标间波及关系</li>
<li>支持点式报表、清单式报表及混合式（多点式或点式与清单式混合）报表设定</li>
<li>支持参数定义</li>
</ol>
<h3 id="报表生成"><a href="#报表生成" class="headerlink" title="报表生成"></a>报表生成</h3><ol>
<li>支持后台定时生成报表</li>
<li>支持人工触发生成报表</li>
<li>分批次生成报表，即前置波及指标生成成功，即可自动生成报表</li>
</ol>
<h3 id="报表检索"><a href="#报表检索" class="headerlink" title="报表检索"></a>报表检索</h3><ol>
<li>支持查询检索已生成的报表</li>
<li>支持报表明细数据查看</li>
<li>支持报表导出Excel格式文件</li>
<li>支持报表数据血缘追踪(追踪到指标及数据集)</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;报表系统业务需求&quot;&gt;&lt;a href=&quot;#报表系统业务需求&quot; class=&quot;headerlink&quot; title=&quot;报表系统业务需求&quot;&gt;&lt;/a&gt;报表系统业务需求&lt;/h1&gt;&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;本系统作为综合统计平台子系统，主要作用是通过数据源生成报表数据，并支持将生成好的报表数据提供给下游报送类系统使用。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://omunsjl7p.bkt.clouddn.com/bbxt_scope.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;功能概览&quot;&gt;&lt;a href=&quot;#功能概览&quot; class=&quot;headerlink&quot; title=&quot;功能概览&quot;&gt;&lt;/a&gt;功能概览&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;功能&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;报表管理&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;管理报表模板&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;模板定义&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;定义报表表样及取数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;报表生成&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;计算生成报表&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;报表检索&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;提供生成完成的报表数据的查询检索及导出&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="工作资料" scheme="http://shihd.github.io/categories/%E5%B7%A5%E4%BD%9C%E8%B5%84%E6%96%99/"/>
    
    
  </entry>
  
  <entry>
    <title>2016新加坡签证攻略</title>
    <link href="http://shihd.github.io/2016/12/16/%E6%97%85%E6%B8%B8%E5%BA%A6%E5%81%87%E2%80%94%E2%80%942016%E6%96%B0%E5%8A%A0%E5%9D%A1%E7%AD%BE%E8%AF%81%E6%94%BB%E7%95%A5/"/>
    <id>http://shihd.github.io/2016/12/16/旅游度假——2016新加坡签证攻略/</id>
    <published>2016-12-16T08:08:03.000Z</published>
    <updated>2016-12-16T08:11:33.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="开场白"><a href="#开场白" class="headerlink" title="开场白"></a>开场白</h2><p>2017年春节就快来临，准备在春节期间带着家人出去度假，由于孩子还小才4岁，且又是冬季，所以想去暖和且适合孩子玩的地方。和老婆一番讨论后，决定去新加坡旅行。在途牛旅游网上订了机票及酒店，并且定购了签证代办服务。</p>
<h2 id="经办商"><a href="#经办商" class="headerlink" title="经办商"></a>经办商</h2><p>途牛旅游网</p>
<h2 id="花费时间"><a href="#花费时间" class="headerlink" title="花费时间"></a>花费时间</h2><p>材料寄送后7至10个工作日完成<br><a id="more"></a></p>
<h2 id="准备材料清单"><a href="#准备材料清单" class="headerlink" title="准备材料清单"></a>准备材料清单</h2><p><strong>成人：</strong></p>
<ol>
<li>户口本复印件<strong>全本</strong></li>
<li>身份证复印件</li>
<li>护照原件（需要寄送盖章）</li>
<li>在职证明原件（若无工作，则需提供银行开具的冻结3个月3万元证明原件）</li>
<li>3个月内近照照片白底2寸2张</li>
<li>申请表原件（中文及英文一共两份）</li>
<li>已婚者提供结婚证复印件</li>
<li>退休者提供退休证复印件或者退休证明</li>
</ol>
<p><strong>小孩：</strong></p>
<ol>
<li>户口本复印件</li>
<li>身份证复印件（<em>我们孩子太小没有身份证，并没有提供</em>）</li>
<li>护照原件</li>
<li>3个月内近照照片白底2寸2张</li>
<li>申请表原件（中文及英文一共两份）</li>
<li>出生证明复印件</li>
<li>在读中学以上的提供在读证明。<br>如果父母不去，则需父母写个委托书以及父母其中一人名下在银行冻结3万元3个月的银行证明原件。</li>
</ol>
<h2 id="材料模版"><a href="#材料模版" class="headerlink" title="材料模版"></a>材料模版</h2><h3 id="在职证明"><a href="#在职证明" class="headerlink" title="在职证明"></a>在职证明</h3><p><img src="https://github.com/shihd/blogpic/blob/master/2016%E6%96%B0%E5%8A%A0%E5%9D%A1%E7%AD%BE%E8%AF%81%E6%94%BB%E7%95%A5/%E5%9C%A8%E8%81%8C%E8%AF%81%E6%98%8E.png?raw=true" alt="在职证明"><br>下载：<a href="https://1drv.ms/w/s!AmhLBFb2th0IhWCafBMRdrI5LLED" target="_blank" rel="external">在职证明</a><br><em>备注：在职证明需要机器打印，除领导签字部分外，其余部分不能手填，否则会不通过，我老婆的在职证明就因此重新来过</em></p>
<h3 id="在读证明"><a href="#在读证明" class="headerlink" title="在读证明"></a>在读证明</h3><p><img src="https://github.com/shihd/blogpic/blob/master/2016%E6%96%B0%E5%8A%A0%E5%9D%A1%E7%AD%BE%E8%AF%81%E6%94%BB%E7%95%A5/%E5%9C%A8%E8%AF%BB%E8%AF%81%E6%98%8E.png?raw=true" alt="在读证明"><br>下载：<a href="https://1drv.ms/w/s!AmhLBFb2th0IhV7E8etDYC9sZicW" target="_blank" rel="external">在读证明</a><br><em>备注：在读中学以上的提供在读证明</em></p>
<h3 id="签证申请表（英文版）"><a href="#签证申请表（英文版）" class="headerlink" title="签证申请表（英文版）"></a>签证申请表（英文版）</h3><p><img src="https://github.com/shihd/blogpic/blob/master/2016%E6%96%B0%E5%8A%A0%E5%9D%A1%E7%AD%BE%E8%AF%81%E6%94%BB%E7%95%A5/%E7%AD%BE%E8%AF%81%E7%94%B3%E8%AF%B7%E8%A1%A8%EF%BC%88%E8%8B%B1%E6%96%87%E7%89%88%EF%BC%89.png?raw=true" alt="签证申请表（英文版）"><br>下载：<a href="https://1drv.ms/b/s!AmhLBFb2th0IhV8zqK66JSZkEYST" target="_blank" rel="external">签证申请表（英文版）</a></p>
<h3 id="签证申请表（中文版）"><a href="#签证申请表（中文版）" class="headerlink" title="签证申请表（中文版）"></a>签证申请表（中文版）</h3><p><img src="https://github.com/shihd/blogpic/blob/master/2016%E6%96%B0%E5%8A%A0%E5%9D%A1%E7%AD%BE%E8%AF%81%E6%94%BB%E7%95%A5/%E7%AD%BE%E8%AF%81%E7%94%B3%E8%AF%B7%E8%A1%A8%EF%BC%88%E4%B8%AD%E6%96%87%E7%89%88%EF%BC%89.png?raw=true" alt="签证申请表（中文版）"><br><em>备注：一定要填写此表，一开始没填就没有审核通过</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;开场白&quot;&gt;&lt;a href=&quot;#开场白&quot; class=&quot;headerlink&quot; title=&quot;开场白&quot;&gt;&lt;/a&gt;开场白&lt;/h2&gt;&lt;p&gt;2017年春节就快来临，准备在春节期间带着家人出去度假，由于孩子还小才4岁，且又是冬季，所以想去暖和且适合孩子玩的地方。和老婆一番讨论后，决定去新加坡旅行。在途牛旅游网上订了机票及酒店，并且定购了签证代办服务。&lt;/p&gt;
&lt;h2 id=&quot;经办商&quot;&gt;&lt;a href=&quot;#经办商&quot; class=&quot;headerlink&quot; title=&quot;经办商&quot;&gt;&lt;/a&gt;经办商&lt;/h2&gt;&lt;p&gt;途牛旅游网&lt;/p&gt;
&lt;h2 id=&quot;花费时间&quot;&gt;&lt;a href=&quot;#花费时间&quot; class=&quot;headerlink&quot; title=&quot;花费时间&quot;&gt;&lt;/a&gt;花费时间&lt;/h2&gt;&lt;p&gt;材料寄送后7至10个工作日完成&lt;br&gt;
    
    </summary>
    
      <category term="旅游度假" scheme="http://shihd.github.io/categories/%E6%97%85%E6%B8%B8%E5%BA%A6%E5%81%87/"/>
    
    
      <category term="新加坡 签证" scheme="http://shihd.github.io/tags/%E6%96%B0%E5%8A%A0%E5%9D%A1-%E7%AD%BE%E8%AF%81/"/>
    
  </entry>
  
  <entry>
    <title>技术资料——Maven入门及基础使用介绍</title>
    <link href="http://shihd.github.io/2016/11/08/%E6%8A%80%E6%9C%AF%E8%B5%84%E6%96%99%E2%80%94%E2%80%94Maven%E5%85%A5%E9%97%A8%E5%8F%8A%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D/"/>
    <id>http://shihd.github.io/2016/11/08/技术资料——Maven入门及基础使用介绍/</id>
    <published>2016-11-08T08:59:38.000Z</published>
    <updated>2016-11-08T09:24:44.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://maven.apache.org/images/maven-logo-black-on-white.png" alt=""></p>
<h1 id="Maven是什么"><a href="#Maven是什么" class="headerlink" title="Maven是什么"></a>Maven是什么</h1><p>Maven的中文本意是“专家、内行”的意思。<br>Apache Maven是一个主要针对Java的项目管理及综合工具，由Apache软件基金会所提供。Maven提供了开发人员构建一个完整的生命周期框架。开发团队可以自动完成项目的基础工具建设，Maven使用标准的目录结构和默认构建生命周期。<br>在多个开发团队环境时，Maven可以设置按标准在非常短的时间里完成配置工作。由于大部分项目的设置都很简单，并且可重复使用，Maven让开发人员的工作更轻松，同时创建报表，检查，构建和测试自动化设置。<br>Maven提供了开发人员的方式来管理：</p>
<ul>
<li>Builds</li>
<li>Documentation</li>
<li>Reporting</li>
<li>Dependencies</li>
<li>SCMs</li>
<li>Releases</li>
<li>Distribution</li>
<li>mailing list<br>概括地说，Maven简化和标准化项目建设过程。处理编译，分配，文档，团队协作和其他任务的无缝连接。 Maven增加可重用性并负责建立相关的任务。 <a id="more"></a>
<h1 id="Maven有什么作用"><a href="#Maven有什么作用" class="headerlink" title="Maven有什么作用"></a>Maven有什么作用</h1></li>
</ul>
<ol>
<li>依赖管理<br>减少对包的重复存储，最大限度的降低代码包大小</li>
<li>插件<br>降低工作量，自动化构建</li>
<li>聚合和继承<br>降低包的冲突及重复引用</li>
</ol>
<h1 id="Maven安装"><a href="#Maven安装" class="headerlink" title="Maven安装"></a>Maven安装</h1><p>请参见<a href="https://maven.apache.org/install.html" target="_blank" rel="external">Maven官网-Install</a><br><em>注：在安装前需确认jdk环境已经安装配置完成。绝大多数IDE安装包中已集成Maven插件，这里就不介绍安装。</em><br><em>注：默认情况下maven的本地仓库会存放在“～／.m2/“目录下。</em></p>
<h1 id="Maven项目结构"><a href="#Maven项目结构" class="headerlink" title="Maven项目结构"></a>Maven项目结构</h1><p><img src="https://raw.githubusercontent.com/shihd/blogpic/master/Maven%E5%85%A5%E9%97%A8%E5%8F%8A%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/maven_project_arche.png" alt=""><br>上图是一个Maven项目目录结构，<br>“pom.xml”是maven主配置文件“项目对象模型”<br>“src／main／java”是项目的源码目录，所有java源码需要在此目录中<br>“src／main／resources”是项目的资源目录，所有配置资源需要在此目录中<br>“src/test/java“是测试目录，所有的测试代码需要放在此目录中<br>”target“为目标目录，编译及生成好的文件在此目录中，该目录由maven创建及管理，无需手工添加</p>
<h1 id="常用maven命令"><a href="#常用maven命令" class="headerlink" title="常用maven命令"></a>常用maven命令</h1><table>
<thead>
<tr>
<th style="text-align:left">命令表达式</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>mvn clean</code></td>
<td style="text-align:left">清除上次编译及生成文件</td>
</tr>
<tr>
<td style="text-align:left"><code>mvn compile</code></td>
<td style="text-align:left">对项目进行编译</td>
</tr>
<tr>
<td style="text-align:left"><code>mvn test</code></td>
<td style="text-align:left">执行全部测试用例</td>
</tr>
<tr>
<td style="text-align:left"><code>mvn package</code></td>
<td style="text-align:left">对项目进行打包</td>
</tr>
<tr>
<td style="text-align:left"><code>mvn install</code></td>
<td style="text-align:left">对项目进行打包并安装到本地仓库</td>
</tr>
</tbody>
</table>
<p><em>注：maven的命令远远不止文中列出的，根据maven的生命周期及插件还有很多命令，可以通过访问官网查询，本文仅仅列出最基础最常用的命令</em></p>
<h1 id="pom编写基础"><a href="#pom编写基础" class="headerlink" title="pom编写基础"></a>pom编写基础</h1><p><img src="https://raw.githubusercontent.com/shihd/blogpic/master/Maven%E5%85%A5%E9%97%A8%E5%8F%8A%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/pom_basic.png" alt=""></p>
<p><code>&lt;modal version&gt;</code>值为4.0.0，使用maven3需要如此设置<br><code>&lt;grounpId&gt;</code>为组id，标识所属的组，一般java源码包命名参照groupId<br><code>&lt;artifactId&gt;</code>为构件id，一般为本项目名称<br><code>&lt;version&gt;</code>为版本号<br><code>&lt;type&gt;</code>为该项目打包类型<br><code>&lt;dependencies&gt;</code>为依赖标签，该标签下配置依赖<br>每个依赖需要用<code>&lt;dependency&gt;</code>标签包围<br>其中<code>&lt;grounpId&gt;</code>为需要依赖的构件包的组id<br>其中<code>&lt;artifactId&gt;</code>为需要依赖的构件的id<br>其中<code>&lt;version&gt;</code>为需要依赖的构件的版本号</p>
<h1 id="构件依赖信息查询"><a href="#构件依赖信息查询" class="headerlink" title="构件依赖信息查询"></a>构件依赖信息查询</h1><p>pom中引用的构件信息可以通过<a href="https://mvnrepository.com/" target="_blank" rel="external">Maven仓库</a>查询。<br><img src="https://github.com/shihd/blogpic/blob/master/Maven%E5%85%A5%E9%97%A8%E5%8F%8A%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/Maven_Repository.png?raw=true" alt=""><br>在搜索框输入需要查询构件进行查询，如“spring jdbc”<br><img src="https://github.com/shihd/blogpic/blob/master/Maven%E5%85%A5%E9%97%A8%E5%8F%8A%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/Maven_Repository_search.png?raw=true" alt=""><br>选择所需要的构建查询详细，<br><img src="https://github.com/shihd/blogpic/blob/master/Maven%E5%85%A5%E9%97%A8%E5%8F%8A%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/Maven_Repository_detail.png?raw=true" alt=""><br>选择需要引用的版本进入<br><img src="https://github.com/shihd/blogpic/blob/master/Maven%E5%85%A5%E9%97%A8%E5%8F%8A%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/Maven_Repository_version.png?raw=true" alt=""><br>在页面里查看maven配置<br><img src="https://github.com/shihd/blogpic/blob/master/Maven%E5%85%A5%E9%97%A8%E5%8F%8A%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/Maven_Repository_dependency.png?raw=true" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://maven.apache.org/images/maven-logo-black-on-white.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Maven是什么&quot;&gt;&lt;a href=&quot;#Maven是什么&quot; class=&quot;headerlink&quot; title=&quot;Maven是什么&quot;&gt;&lt;/a&gt;Maven是什么&lt;/h1&gt;&lt;p&gt;Maven的中文本意是“专家、内行”的意思。&lt;br&gt;Apache Maven是一个主要针对Java的项目管理及综合工具，由Apache软件基金会所提供。Maven提供了开发人员构建一个完整的生命周期框架。开发团队可以自动完成项目的基础工具建设，Maven使用标准的目录结构和默认构建生命周期。&lt;br&gt;在多个开发团队环境时，Maven可以设置按标准在非常短的时间里完成配置工作。由于大部分项目的设置都很简单，并且可重复使用，Maven让开发人员的工作更轻松，同时创建报表，检查，构建和测试自动化设置。&lt;br&gt;Maven提供了开发人员的方式来管理：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Builds&lt;/li&gt;
&lt;li&gt;Documentation&lt;/li&gt;
&lt;li&gt;Reporting&lt;/li&gt;
&lt;li&gt;Dependencies&lt;/li&gt;
&lt;li&gt;SCMs&lt;/li&gt;
&lt;li&gt;Releases&lt;/li&gt;
&lt;li&gt;Distribution&lt;/li&gt;
&lt;li&gt;mailing list&lt;br&gt;概括地说，Maven简化和标准化项目建设过程。处理编译，分配，文档，团队协作和其他任务的无缝连接。 Maven增加可重用性并负责建立相关的任务。
    
    </summary>
    
      <category term="技术资料" scheme="http://shihd.github.io/categories/%E6%8A%80%E6%9C%AF%E8%B5%84%E6%96%99/"/>
    
    
      <category term="Maven" scheme="http://shihd.github.io/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>技术资料——Docker入门及基础操作</title>
    <link href="http://shihd.github.io/2016/11/03/%E6%8A%80%E6%9C%AF%E8%B5%84%E6%96%99%E2%80%94%E2%80%94Docker%E5%85%A5%E9%97%A8%E5%8F%8A%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/"/>
    <id>http://shihd.github.io/2016/11/03/技术资料——Docker入门及基础操作/</id>
    <published>2016-11-03T03:27:10.000Z</published>
    <updated>2016-11-10T06:49:27.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://blog.birkhoff.me/content/images/2016/07/automated-deploying-containers-after-push.png" alt=""></p>
<h1 id="Docker是什么？"><a href="#Docker是什么？" class="headerlink" title="Docker是什么？"></a>Docker是什么？</h1><p>Docker的中文本意是码头工人，用于搬运货柜。<a href="https://www.docker.com/" target="_blank" rel="external">Docker官网</a>给出的解释是Docker是世界领先的软件货柜运输平台。通俗来说就是Docker就是一个可以将软件打包在一个标准的“货柜”里，并可以轻松迁移的平台。<br><a id="more"></a></p>
<h1 id="Docker有什么作用？"><a href="#Docker有什么作用？" class="headerlink" title="Docker有什么作用？"></a>Docker有什么作用？</h1><p>Docker容器打包软件到一个包含了所有运行所需环境（代码、运行时状态、系统工具、系统库——任何可以被安装在服务器上的环境）的文件系统里，这样软件无论被迁移到哪里都是同样的运行环境。<br>通俗来说就是开发环境如果没有问题，用Docker打包成容器在服务器上运行，至少不会遇到环境问题。<br>还有像我这样使用Mac开发的程序员，如果需要开发oracle数据库，本地是无法安装oracle的，可以通过docker运行一个oracle镜像。</p>
<h1 id="Docker的特点"><a href="#Docker的特点" class="headerlink" title="Docker的特点"></a>Docker的特点</h1><p><strong>轻量性</strong><br>运行在一台机器上的容器共享其操作系统内核，它们启动使用更少的内存。Docker的镜像文件可以通过分层的文件系统及共享的公共文件创建（说白了就是Docker的镜像文件可以在其他镜像基础上创建并且还可以共享使用其他镜像或操作系统的文件，这样镜像文件就很小），节省磁盘空间并提高下载效率。</p>
<p><strong>开放性</strong><br>Docker容器基于开放标准，使容器能够在所有的主流Linux及windows或者其他设备的顶层运行。</p>
<p><strong>默认安全性</strong><br>容器隔离彼此和基础架构应用，同时为应用程序提供了额外的保护层。</p>
<h1 id="Docker容器与虚拟机比较"><a href="#Docker容器与虚拟机比较" class="headerlink" title="Docker容器与虚拟机比较"></a>Docker容器与虚拟机比较</h1><p><strong>虚拟机</strong><br><img src="https://www.docker.com/sites/default/files/WhatIsDocker_2_VMs_0-2_2.png" alt=""><br>虚拟机系统包含应用程序、必要的二进制文件和库和一个完整的客体操作系统，所有这些加起来至少几十GB。</p>
<p><strong>Docker容器</strong><br><img src="https://www.docker.com/sites/default/files/WhatIsDocker_3_Containers_2_0.png" alt=""><br>Docker容器包含应用程序及其所需依赖，在主机操作系统上运行时，共享主机操作系统内核，每个容器都作为独立进程运行。Docker容器不限制设备型号等，可以运行在所有的设备上。</p>
<h1 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h1><p><strong>Mac上安装</strong><br>请参阅<a href="https://www.docker.com/products/docker#/mac" target="_blank" rel="external">Docker官网-Docker for Mac</a></p>
<p><strong>Windows上安装</strong><br>请参阅<a href="https://www.docker.com/products/docker#/windows" target="_blank" rel="external">Docker官网-Docker for Windows</a></p>
<p><strong>Windows Server上安装</strong><br>请参阅<a href="https://www.docker.com/products/docker#/windows-server" target="_blank" rel="external">Docker官网-Docker for Windows Server</a></p>
<p><strong>Linux上安装</strong><br>请参阅<a href="https://www.docker.com/products/docker#/linux" target="_blank" rel="external">Docker官网-Docker for Linux</a></p>
<p><strong>AWS上安装</strong><br>请参阅<a href="https://www.docker.com/products/docker#/AWS" target="_blank" rel="external">Docker官网-Docker for AWS</a></p>
<p><strong>AZURE上安装</strong><br>请参阅<a href="https://www.docker.com/products/docker#/azure" target="_blank" rel="external">Docker官网-Docker for AZURE</a></p>
<h1 id="Docker基础操作"><a href="#Docker基础操作" class="headerlink" title="Docker基础操作"></a>Docker基础操作</h1><h2 id="搜索镜像"><a href="#搜索镜像" class="headerlink" title="搜索镜像"></a>搜索镜像</h2><p>作为初学者和实用主义者，建议先学习使用别人的镜像，即方便又简单，网上有很多牛人制作好的镜像文件，我只需找到它们直接使用即可，可大大减少我们搭建环境的时间。</p>
<p><strong>方法一：访问Docker Hub网站搜索</strong></p>
<ol>
<li><p>首先通过浏览器访问<a href="https://hub.docker.com/" target="_blank" rel="external">Docker Hub网站</a><br><img src="https://github.com/shihd/blogpic/blob/master/Docker%E5%85%A5%E9%97%A8%E5%8F%8A%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/hub.docker.com.png?raw=true" alt=""></p>
</li>
<li><p>在右上角的搜索栏中输入要搜做的镜像关键字，如：tomcat，返回如下页面：<br><img src="https://github.com/shihd/blogpic/blob/master/Docker%E5%85%A5%E9%97%A8%E5%8F%8A%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/Search_tomcat_Docker%20Hub.png?raw=true" alt=""></p>
</li>
<li><p>选择需要使用镜像，如：<br><img src="https://github.com/shihd/blogpic/blob/master/Docker%E5%85%A5%E9%97%A8%E5%8F%8A%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/tomcat_Docker%20Hub.png?raw=true" alt=""></p>
</li>
<li><p>查看镜像详细<br><img src="https://github.com/shihd/blogpic/blob/master/Docker%E5%85%A5%E9%97%A8%E5%8F%8A%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/tomcat_detail_Docker%20Hub.png?raw=true" alt=""></p>
</li>
</ol>
<p><strong>方法二：通过命令行搜索</strong><br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>docker search tomcat</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/shihd/blogpic/blob/master/Docker%E5%85%A5%E9%97%A8%E5%8F%8A%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/terminal_dockersearch.png?raw=true" alt=""></p>
<h2 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h2><p>在命令行模式下键入以下命令<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>docker pull tomcat</div></pre></td></tr></table></figure></p>
<p>其中“tomcat”是镜像名（name)，该命令可以在Docker Hub官网上搜索到的镜像详细中查看到<br><img src="https://github.com/shihd/blogpic/blob/master/Docker%E5%85%A5%E9%97%A8%E5%8F%8A%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/tomcat_pull_Docker%20Hub.png?raw=true" alt=""></p>
<h2 id="查看本地镜像列表"><a href="#查看本地镜像列表" class="headerlink" title="查看本地镜像列表"></a>查看本地镜像列表</h2><p>在命令行模式下键入以下命令<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>docker images</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/shihd/blogpic/blob/master/Docker%E5%85%A5%E9%97%A8%E5%8F%8A%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/docker_images.png?raw=true" alt=""><br>其中“image id”为镜像编号</p>
<h2 id="删除本地镜像"><a href="#删除本地镜像" class="headerlink" title="删除本地镜像"></a>删除本地镜像</h2><p>在命令行模式下键入以下命令<br><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker rmi <span class="string">[image id]</span></div></pre></td></tr></table></figure></p>
<p>其中“[image id]”替换为具体的镜像“image id”<br>镜像删除时不能有该镜像的容器存在，无论是运行中的还是停止的</p>
<h2 id="启动镜像成容器"><a href="#启动镜像成容器" class="headerlink" title="启动镜像成容器"></a>启动镜像成容器</h2><p>在命令行模式下键入以下命令<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker <span class="built_in">run</span> -<span class="keyword">it</span> <span class="comment">--rm -p 8888:8080 tomcat:latest</span></div></pre></td></tr></table></figure></p>
<p>其中“-it”代表开启交互功能，即容器内tomcat启动日志你将能看到。<br>其中“—rm”代表当启动的容器停止后自动删除该容器（不是镜像哦）。<br>其中“-p 8888:8080”代表将容器中的8080端口映射到本地机器的8888端口上，即我们可以通过localhost:8888端口访问到tomcat，甚至我可以改变本地端口来启动多个tomcat容器。<br>最后的“tomcat:latest”代表启动的容器名称及其版本标签。<br>还有很多其他的docker run的参数请查看<a href="https://docs.docker.com/engine/reference/commandline/run/" target="_blank" rel="external">docker官网-文档-run</a><br>该条启动命令可以在Docker Hub上该镜像的详细说明中查看，其中会有多种启动方式说明<br><img src="https://github.com/shihd/blogpic/blob/master/Docker%E5%85%A5%E9%97%A8%E5%8F%8A%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/docker_run_Docker%20Hub.png?raw=true" alt=""></p>
<h2 id="查看运行中的容器"><a href="#查看运行中的容器" class="headerlink" title="查看运行中的容器"></a>查看运行中的容器</h2><p>在命令行模式下键入以下命令<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>docker ps</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/shihd/blogpic/blob/master/Docker%E5%85%A5%E9%97%A8%E5%8F%8A%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/docker_ps.png?raw=true" alt=""><br>其中“container id”为容器编号，下面的操作将与它相关</p>
<h2 id="进入运行中的容器内部执行命令"><a href="#进入运行中的容器内部执行命令" class="headerlink" title="进入运行中的容器内部执行命令"></a>进入运行中的容器内部执行命令</h2><p>有时容器的设置并不能满足我们的需要，比如，我们可能需要增加一个tomcat用户，或是配置一个数据源连接池等，需要进入容器中修改参数，下面我们就介绍下如何进入容器中。<br>在命令行模式下键入以下命令<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker exec -<span class="keyword">it</span> [container <span class="built_in">id</span>] /bin/bash</div></pre></td></tr></table></figure></p>
<p>就可以进入容器内的命令行模式，其中“[container id]”在执行时替换为具体容器的container id<br><img src="https://github.com/shihd/blogpic/blob/master/Docker%E5%85%A5%E9%97%A8%E5%8F%8A%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/docker_exec.png?raw=true" alt=""></p>
<h2 id="停止运行中的容器"><a href="#停止运行中的容器" class="headerlink" title="停止运行中的容器"></a>停止运行中的容器</h2><p>在命令行模式下键入以下命令<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker <span class="keyword">stop</span> [<span class="keyword">container</span> <span class="keyword">id</span>]</div></pre></td></tr></table></figure></p>
<p>其中“[container id]”在执行时替换为具体容器的“container id”</p>
<h2 id="查看停止状态的容器"><a href="#查看停止状态的容器" class="headerlink" title="查看停止状态的容器"></a>查看停止状态的容器</h2><p>在命令行模式下键入以下命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker ps <span class="_">-a</span></div></pre></td></tr></table></figure></p>
<h2 id="启动停止状态的容器"><a href="#启动停止状态的容器" class="headerlink" title="启动停止状态的容器"></a>启动停止状态的容器</h2><p>在命令行模式下键入以下命令<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker <span class="keyword">start</span> [<span class="keyword">container</span> <span class="keyword">id</span>]</div></pre></td></tr></table></figure></p>
<p>其中“[container id]”在执行时替换为具体容器的“container id”</p>
<h2 id="删除的容器"><a href="#删除的容器" class="headerlink" title="删除的容器"></a>删除的容器</h2><p>在命令行模式下键入以下命令<br><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker rm <span class="string">[container id]</span></div></pre></td></tr></table></figure></p>
<p>其中“[container id]”在执行时替换为具体容器的“container id”</p>
<h2 id="提交容器成为新的镜像"><a href="#提交容器成为新的镜像" class="headerlink" title="提交容器成为新的镜像"></a>提交容器成为新的镜像</h2><p>在命令行模式下键入以下命令<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker <span class="keyword">commit</span> [<span class="keyword">container</span> <span class="keyword">id</span>] [your <span class="keyword">name</span>]/[image <span class="keyword">name</span>]:[tag]</div></pre></td></tr></table></figure></p>
<p>其中“[container id]”在执行时替换为具体容器的“container id”<br>其中“[your name]”在执行时替换为你的名字，方便大家知道是你做的镜像<br>其中“[image name]”在执行时替换为你希望的镜像名称<br>其中“[tag]”在执行时替换为你的镜像的版本，也可以不指定<br>详细“docker commit”说明请参考<a href="https://docs.docker.com/engine/reference/commandline/commit/" target="_blank" rel="external">docker官网-文档-commit</a></p>
<h2 id="导出镜像"><a href="#导出镜像" class="headerlink" title="导出镜像"></a>导出镜像</h2><p>在命令行模式下键入以下命令<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker save [image <span class="built_in">name</span>] &gt; [<span class="keyword">local</span> <span class="built_in">file</span> <span class="built_in">name</span>].tar</div></pre></td></tr></table></figure></p>
<p>其中“[container id]”在执行时替换为具体镜像的名字<br>其中“[local file name]”在执行时替换为你想取的本地文件名</p>
<h2 id="载入镜像"><a href="#载入镜像" class="headerlink" title="载入镜像"></a>载入镜像</h2><p>在命令行模式下键入以下命令<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker <span class="keyword">load</span> &lt; [<span class="keyword">local</span> <span class="keyword">file</span> <span class="keyword">full</span> <span class="keyword">name</span>]</div></pre></td></tr></table></figure></p>
<p>其中“[local file full name]” 在执行时替换为本地文件名（含扩展名）</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://blog.birkhoff.me/content/images/2016/07/automated-deploying-containers-after-push.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Docker是什么？&quot;&gt;&lt;a href=&quot;#Docker是什么？&quot; class=&quot;headerlink&quot; title=&quot;Docker是什么？&quot;&gt;&lt;/a&gt;Docker是什么？&lt;/h1&gt;&lt;p&gt;Docker的中文本意是码头工人，用于搬运货柜。&lt;a href=&quot;https://www.docker.com/&quot;&gt;Docker官网&lt;/a&gt;给出的解释是Docker是世界领先的软件货柜运输平台。通俗来说就是Docker就是一个可以将软件打包在一个标准的“货柜”里，并可以轻松迁移的平台。&lt;br&gt;
    
    </summary>
    
      <category term="技术资料" scheme="http://shihd.github.io/categories/%E6%8A%80%E6%9C%AF%E8%B5%84%E6%96%99/"/>
    
    
      <category term="Docker" scheme="http://shihd.github.io/tags/Docker/"/>
    
  </entry>
  
</feed>
