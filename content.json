{"meta":{"title":"Explorer","subtitle":"探索者","description":null,"author":"Shihd","url":"http://shihd.github.io"},"pages":[{"title":"Categories","date":"2016-11-05T06:46:48.000Z","updated":"2016-11-05T06:12:44.000Z","comments":true,"path":"categories/index.html","permalink":"http://shihd.github.io/categories/index.html","excerpt":"","text":""},{"title":"Tags","date":"2016-11-05T06:46:48.000Z","updated":"2016-11-05T06:12:44.000Z","comments":true,"path":"tags/index.html","permalink":"http://shihd.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"技术资料————解析99行代码的在线电子表格","slug":"技术资料——解析99行代码的在线电子表格","date":"2017-05-16T02:36:14.000Z","updated":"2017-05-16T02:38:11.000Z","comments":true,"path":"2017/05/16/技术资料——解析99行代码的在线电子表格/","link":"","permalink":"http://shihd.github.io/2017/05/16/技术资料——解析99行代码的在线电子表格/","excerpt":"解析99行代码的在线电子表格（Web Spreadsheet in 99 lines)序言随着浏览器运行性能及前端技术的日新月异，对于使用在线表格做报表已经成为时下主流趋势，而在线电子表格也层出不穷，如Google的SpreadSheet等，由于公司报表类产品中需要使用在线电子表格，并且要在基本的电子表格控件上增加许多额外与业务相关的扩展，因此在咨询及使用过一些通用工具后决定自己造轮子。造轮子之前先学习前人的经验，如何设计在线电子表格。为了入门我们先选择了本文将介绍的这个99行代码完成的在线电子表格。 99行代码的电子表格简介 作者：audreyt 源码地址： http://jsfiddle.net/audreyt/LtDyP/ 使用技术： HTML5+CSS3+AngularJS1.x 主界面截图:","text":"解析99行代码的在线电子表格（Web Spreadsheet in 99 lines)序言随着浏览器运行性能及前端技术的日新月异，对于使用在线表格做报表已经成为时下主流趋势，而在线电子表格也层出不穷，如Google的SpreadSheet等，由于公司报表类产品中需要使用在线电子表格，并且要在基本的电子表格控件上增加许多额外与业务相关的扩展，因此在咨询及使用过一些通用工具后决定自己造轮子。造轮子之前先学习前人的经验，如何设计在线电子表格。为了入门我们先选择了本文将介绍的这个99行代码完成的在线电子表格。 99行代码的电子表格简介 作者：audreyt 源码地址： http://jsfiddle.net/audreyt/LtDyP/ 使用技术： HTML5+CSS3+AngularJS1.x 主界面截图: 绘制表格的方法1 定义行数组（Rows）与列数组（Cols）1$scope.Cols = [], $scope.Rows = []; 2 初始化数组 将列数组（Cols）初始化为[&#39;A&#39;,&#39;B&#39;,&#39;C&#39;,&#39;D&#39;,&#39;E&#39;,&#39;F&#39;,&#39;G&#39;,&#39;H&#39;] 将行数组（Rows）初始化为[1,2,3,4,...,18,19,20] 12makeRange($scope.Cols, 'A', 'H');makeRange($scope.Rows, 1, 20); 其中makeRange(array, cur, end)函数的作用就是根据cur至end之间的范围初始化给array数组，源码如下： 1234567function makeRange(array, cur, end) &#123; while (cur &lt;= end) &#123; array.push(cur); // If it’s a number, increase it by one; otherwise move to next letter cur = (isNaN( cur ) ? String.fromCharCode(cur.charCodeAt()+1 ) : cur+1); &#125;&#125; 3 绑定页面元素 利用AngularJS的双向数据绑定特性，将Javascript变量与页面元素进行绑定 1234567891011121314&lt;table&gt; &lt;tr&gt; &lt;th&gt; &lt;button type=\"button\" ng-click=\"reset();calc()\"&gt;↻&lt;/button&gt; &lt;/th&gt; &lt;th ng-repeat=\"col in Cols\"&gt;&#123;&#123; col &#125;&#125;&lt;/th&gt; &lt;/tr&gt; &lt;tr ng-repeat=\"row in Rows\"&gt; &lt;th&gt;&#123;&#123; row &#125;&#125;&lt;/th&gt; &lt;td ng-repeat=\"col in Cols\" ng-class=\"&#123; formula: ( '=' === sheet[col+row][0] ) &#125;\"&gt; &lt;input id=\"&#123;&#123; col+row &#125;&#125;\" ng-model=\"sheet[col+row]\" ng-change=\"calc()\" ng-model-options=\"&#123; debounce: 200 &#125;\" ng-keydown=\"keydown( $event, col, row )\"&gt; &lt;/td&gt; &lt;/tr&gt;&lt;/table&gt; 通过该HTML代码可以了解，其实表格是通过&lt;table&gt;标签实现的，其中的单元格就是&lt;input&gt;文本框，通过行列的循环（ng-repeat）绘制出一张电子表格。 列头为表格第一行，列头第一个元素是一个刷新按钮，其余通过循环(ng-repeat)列数组（Cols）绘制，并将数组元素值作为元素显示内容 123456&lt;tr&gt; &lt;th&gt; &lt;button type=\"button\" ng-click=\"reset();calc()\"&gt;↻&lt;/button&gt; &lt;/th&gt; &lt;th ng-repeat=\"col in Cols\"&gt;&#123;&#123; col &#125;&#125;&lt;/th&gt;&lt;/tr&gt; 第二行开始绘制表格内单元格，首先按行数组（Rows）进行循环(ng-repeat)，然后在单个行循环体内，第一个列作为行头，显示行数组的值作为行号，其余通过循环(ng-repeat)列数组（Cols）并插入&lt;input&gt;文本框，并将列号加行号的组合字符串赋值给该单元格ID属性 123456&lt;tr ng-repeat=\"row in Rows\"&gt; &lt;th&gt;&#123;&#123; row &#125;&#125;&lt;/th&gt; &lt;td ng-repeat=\"col in Cols\" ng-class=\"&#123; formula: ( '=' === sheet[col+row][0] ) &#125;\"&gt; &lt;input id=\"&#123;&#123; col+row &#125;&#125;\" ng-model=\"sheet[col+row]\" ng-change=\"calc()\" ng-model-options=\"&#123; debounce: 200 &#125;\" ng-keydown=\"keydown( $event, col, row )\"&gt; &lt;/td&gt;&lt;/tr&gt; 如此，一张电子表格就绘制完成 单元格添加键盘事件 HTML中&lt;input&gt;标签上声明键盘按下事件（ng-keydown） 1&lt;input id=\"&#123;&#123; col+row &#125;&#125;\" ng-model=\"sheet[col+row]\" ng-change=\"calc()\" ng-model-options=\"&#123; debounce: 200 &#125;\" ng-keydown=\"keydown( $event, col, row )\"&gt; JS中实现keydown( $event, col, row )方法 123456789101112// UP(38) and DOWN(40)/ENTER(13) move focus to the row above (-1) and below (+1).$scope.keydown = function(event, col, row) &#123; switch(event.which) &#123; case 38: case 40: case 13: $timeout( function() &#123; var direction = (event.which === 38) ? -1 : +1; var cell = document.querySelector( '#' + col + (row + direction) ); if (cell) &#123; cell.focus(); &#125; &#125; ); &#125;&#125;; 如果当键盘按下“上”键（键值：38），则根据单元格ID属性找到上方第一个一个单元格，并使其成为焦点（focus）；如果当键盘按下“下”键（键值：40）或“回车”键（键值：13），则根据单元格ID属性找到下方一个单元格，并使其成为焦点（focus）。 表格的数值存储 在Javascript代码中声明sheet对象 12// Restore the previous .sheet$scope.sheet = angular.fromJson( localStorage.getItem( '' ) ); 在HTML中&lt;input&gt;文本框标签内绑定（ng-model）sheet变量 1&lt;input id=\"&#123;&#123; col+row &#125;&#125;\" ng-model=\"sheet[col+row]\" ng-change=\"calc()\" ng-model-options=\"&#123; debounce: 200 &#125;\" ng-keydown=\"keydown( $event, col, row )\"&gt; sheet对象中存储形式为键值对，如1$scope.sheet = &#123; B1: 1874, A2: '+', B2: 2046, A3: '⇒', B3: '=B1+B2' &#125;; 其中键为单元格ID属性，即行+列组合的字符串，值为单元格值。 表格的运算过程 表格计算通过Web Workers开启计算线程完成 1$scope.worker = new Worker(\"/echo/js/?js=\"+encodeURIComponent(\"(\" + WorkerJS.toString() + \")()\")); 具体计算方法写在WorkerJS()函数内 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748// Worker.jsfunction WorkerJS () &#123; var sheet, errs, vals; self.onmessage = function(message) &#123; sheet = message.data, errs = &#123;&#125;, vals = &#123;&#125;; Object.getOwnPropertyNames(sheet || &#123;&#125;).forEach(function(coord) &#123; // Four variable names pointing to the same coordinate: A1, a1, $A1, $a1 [ '', '$' ].forEach(function(p) &#123; [ coord, coord.toLowerCase() ].forEach(function(c)&#123; var name = p+c; // Worker is reused across computations, so only define each variable once if ((Object.getOwnPropertyDescriptor( self, name ) || &#123;&#125;).get) &#123; return; &#125; // Define self['A1'], which is the same thing as the global variable A1 Object.defineProperty( self, name, &#123; get: function() &#123; if (coord in vals) &#123; return vals[coord]; &#125; vals[coord] = NaN; // Turn numeric strings into numbers, so =A1+C1 works when both are numbers var x = +sheet[coord]; if (sheet[coord] !== x.toString()) &#123; x = sheet[coord]; &#125; // Evaluate formula cells that begin with = try &#123; vals[coord] = (('=' === x[0]) ? eval.call( null, x.slice( 1 ) ) : x); &#125; catch (e) &#123; var match = /\\$?[A-Za-z]+[1-9][0-9]*\\b/.exec( e ); if (match &amp;&amp; !( match[0] in self )) &#123; // The formula refers to a uninitialized cell; set it to 0 and retry self[match[0]] = 0; delete vals[coord]; return self[coord]; &#125; // Otherwise, stringify the caught exception in the errs object errs[coord] = e.toString(); &#125; // Turn vals[coord] into a string if it's not a number or boolean switch (typeof vals[coord]) &#123; case 'function': case 'object': vals[coord]+=''; &#125; return vals[coord]; &#125; &#125; ); &#125;); &#125;); &#125;); // For each coordinate in the sheet, call the property getter defined above for (var coord in sheet) &#123; self[coord]; &#125; postMessage([ errs, vals ]); &#125;;&#125; 计算流程为 总结经过分析，99行实现的该电子表格虽然功能简单，但是基本的表格绘制及运算实现了，为我们未来设计电子表格结构提供了重要的参考价值。","categories":[{"name":"技术资料","slug":"技术资料","permalink":"http://shihd.github.io/categories/技术资料/"}],"tags":[],"keywords":[{"name":"技术资料","slug":"技术资料","permalink":"http://shihd.github.io/categories/技术资料/"}]},{"title":"工作资料-报表系统业务需求","slug":"工作资料-报表系统业务需求","date":"2017-05-16T02:23:16.000Z","updated":"2017-05-16T02:25:00.000Z","comments":true,"path":"2017/05/16/工作资料-报表系统业务需求/","link":"","permalink":"http://shihd.github.io/2017/05/16/工作资料-报表系统业务需求/","excerpt":"报表系统业务需求概述本系统作为综合统计平台子系统，主要作用是通过数据源生成报表数据，并支持将生成好的报表数据提供给下游报送类系统使用。 功能概览 功能 描述 报表管理 管理报表模板 模板定义 定义报表表样及取数 报表生成 计算生成报表 报表检索 提供生成完成的报表数据的查询检索及导出","text":"报表系统业务需求概述本系统作为综合统计平台子系统，主要作用是通过数据源生成报表数据，并支持将生成好的报表数据提供给下游报送类系统使用。 功能概览 功能 描述 报表管理 管理报表模板 模板定义 定义报表表样及取数 报表生成 计算生成报表 报表检索 提供生成完成的报表数据的查询检索及导出 系统主流程 功能详述报表管理 支持报表模板的新增、编辑及删除 模板支持历史版本追踪 模板定义 支持在线编辑电子表格 支持表样设计 支持载入Excel设计表样 支持指标映射取数定义 支持多数据源接入（本次可不考虑） 支持数据集及取数配置 自动生成与指标间波及关系 支持点式报表、清单式报表及混合式（多点式或点式与清单式混合）报表设定 支持参数定义 报表生成 支持后台定时生成报表 支持人工触发生成报表 分批次生成报表，即前置波及指标生成成功，即可自动生成报表 报表检索 支持查询检索已生成的报表 支持报表明细数据查看 支持报表导出Excel格式文件 支持报表数据血缘追踪(追踪到指标及数据集)","categories":[{"name":"工作资料","slug":"工作资料","permalink":"http://shihd.github.io/categories/工作资料/"}],"tags":[],"keywords":[{"name":"工作资料","slug":"工作资料","permalink":"http://shihd.github.io/categories/工作资料/"}]},{"title":"2016新加坡签证攻略","slug":"旅游度假——2016新加坡签证攻略","date":"2016-12-16T08:08:03.000Z","updated":"2016-12-16T08:11:33.000Z","comments":true,"path":"2016/12/16/旅游度假——2016新加坡签证攻略/","link":"","permalink":"http://shihd.github.io/2016/12/16/旅游度假——2016新加坡签证攻略/","excerpt":"开场白2017年春节就快来临，准备在春节期间带着家人出去度假，由于孩子还小才4岁，且又是冬季，所以想去暖和且适合孩子玩的地方。和老婆一番讨论后，决定去新加坡旅行。在途牛旅游网上订了机票及酒店，并且定购了签证代办服务。 经办商途牛旅游网 花费时间材料寄送后7至10个工作日完成","text":"开场白2017年春节就快来临，准备在春节期间带着家人出去度假，由于孩子还小才4岁，且又是冬季，所以想去暖和且适合孩子玩的地方。和老婆一番讨论后，决定去新加坡旅行。在途牛旅游网上订了机票及酒店，并且定购了签证代办服务。 经办商途牛旅游网 花费时间材料寄送后7至10个工作日完成 准备材料清单成人： 户口本复印件全本 身份证复印件 护照原件（需要寄送盖章） 在职证明原件（若无工作，则需提供银行开具的冻结3个月3万元证明原件） 3个月内近照照片白底2寸2张 申请表原件（中文及英文一共两份） 已婚者提供结婚证复印件 退休者提供退休证复印件或者退休证明 小孩： 户口本复印件 身份证复印件（我们孩子太小没有身份证，并没有提供） 护照原件 3个月内近照照片白底2寸2张 申请表原件（中文及英文一共两份） 出生证明复印件 在读中学以上的提供在读证明。如果父母不去，则需父母写个委托书以及父母其中一人名下在银行冻结3万元3个月的银行证明原件。 材料模版在职证明下载：在职证明备注：在职证明需要机器打印，除领导签字部分外，其余部分不能手填，否则会不通过，我老婆的在职证明就因此重新来过 在读证明下载：在读证明备注：在读中学以上的提供在读证明 签证申请表（英文版）下载：签证申请表（英文版） 签证申请表（中文版）备注：一定要填写此表，一开始没填就没有审核通过","categories":[{"name":"旅游度假","slug":"旅游度假","permalink":"http://shihd.github.io/categories/旅游度假/"}],"tags":[{"name":"新加坡 签证","slug":"新加坡-签证","permalink":"http://shihd.github.io/tags/新加坡-签证/"}],"keywords":[{"name":"旅游度假","slug":"旅游度假","permalink":"http://shihd.github.io/categories/旅游度假/"}]},{"title":"技术资料——Maven入门及基础使用介绍","slug":"技术资料——Maven入门及基础使用介绍","date":"2016-11-08T08:59:38.000Z","updated":"2016-11-08T09:24:44.000Z","comments":true,"path":"2016/11/08/技术资料——Maven入门及基础使用介绍/","link":"","permalink":"http://shihd.github.io/2016/11/08/技术资料——Maven入门及基础使用介绍/","excerpt":"Maven是什么Maven的中文本意是“专家、内行”的意思。Apache Maven是一个主要针对Java的项目管理及综合工具，由Apache软件基金会所提供。Maven提供了开发人员构建一个完整的生命周期框架。开发团队可以自动完成项目的基础工具建设，Maven使用标准的目录结构和默认构建生命周期。在多个开发团队环境时，Maven可以设置按标准在非常短的时间里完成配置工作。由于大部分项目的设置都很简单，并且可重复使用，Maven让开发人员的工作更轻松，同时创建报表，检查，构建和测试自动化设置。Maven提供了开发人员的方式来管理： Builds Documentation Reporting Dependencies SCMs Releases Distribution mailing list概括地说，Maven简化和标准化项目建设过程。处理编译，分配，文档，团队协作和其他任务的无缝连接。 Maven增加可重用性并负责建立相关的任务。","text":"Maven是什么Maven的中文本意是“专家、内行”的意思。Apache Maven是一个主要针对Java的项目管理及综合工具，由Apache软件基金会所提供。Maven提供了开发人员构建一个完整的生命周期框架。开发团队可以自动完成项目的基础工具建设，Maven使用标准的目录结构和默认构建生命周期。在多个开发团队环境时，Maven可以设置按标准在非常短的时间里完成配置工作。由于大部分项目的设置都很简单，并且可重复使用，Maven让开发人员的工作更轻松，同时创建报表，检查，构建和测试自动化设置。Maven提供了开发人员的方式来管理： Builds Documentation Reporting Dependencies SCMs Releases Distribution mailing list概括地说，Maven简化和标准化项目建设过程。处理编译，分配，文档，团队协作和其他任务的无缝连接。 Maven增加可重用性并负责建立相关的任务。 Maven有什么作用 依赖管理减少对包的重复存储，最大限度的降低代码包大小 插件降低工作量，自动化构建 聚合和继承降低包的冲突及重复引用 Maven安装请参见Maven官网-Install注：在安装前需确认jdk环境已经安装配置完成。绝大多数IDE安装包中已集成Maven插件，这里就不介绍安装。注：默认情况下maven的本地仓库会存放在“～／.m2/“目录下。 Maven项目结构上图是一个Maven项目目录结构，“pom.xml”是maven主配置文件“项目对象模型”“src／main／java”是项目的源码目录，所有java源码需要在此目录中“src／main／resources”是项目的资源目录，所有配置资源需要在此目录中“src/test/java“是测试目录，所有的测试代码需要放在此目录中”target“为目标目录，编译及生成好的文件在此目录中，该目录由maven创建及管理，无需手工添加 常用maven命令 命令表达式 说明 mvn clean 清除上次编译及生成文件 mvn compile 对项目进行编译 mvn test 执行全部测试用例 mvn package 对项目进行打包 mvn install 对项目进行打包并安装到本地仓库 注：maven的命令远远不止文中列出的，根据maven的生命周期及插件还有很多命令，可以通过访问官网查询，本文仅仅列出最基础最常用的命令 pom编写基础 &lt;modal version&gt;值为4.0.0，使用maven3需要如此设置&lt;grounpId&gt;为组id，标识所属的组，一般java源码包命名参照groupId&lt;artifactId&gt;为构件id，一般为本项目名称&lt;version&gt;为版本号&lt;type&gt;为该项目打包类型&lt;dependencies&gt;为依赖标签，该标签下配置依赖每个依赖需要用&lt;dependency&gt;标签包围其中&lt;grounpId&gt;为需要依赖的构件包的组id其中&lt;artifactId&gt;为需要依赖的构件的id其中&lt;version&gt;为需要依赖的构件的版本号 构件依赖信息查询pom中引用的构件信息可以通过Maven仓库查询。在搜索框输入需要查询构件进行查询，如“spring jdbc”选择所需要的构建查询详细，选择需要引用的版本进入在页面里查看maven配置","categories":[{"name":"技术资料","slug":"技术资料","permalink":"http://shihd.github.io/categories/技术资料/"}],"tags":[{"name":"Maven","slug":"Maven","permalink":"http://shihd.github.io/tags/Maven/"}],"keywords":[{"name":"技术资料","slug":"技术资料","permalink":"http://shihd.github.io/categories/技术资料/"}]},{"title":"技术资料——Docker入门及基础操作","slug":"技术资料——Docker入门及基础操作","date":"2016-11-03T03:27:10.000Z","updated":"2016-11-10T06:49:27.000Z","comments":true,"path":"2016/11/03/技术资料——Docker入门及基础操作/","link":"","permalink":"http://shihd.github.io/2016/11/03/技术资料——Docker入门及基础操作/","excerpt":"Docker是什么？Docker的中文本意是码头工人，用于搬运货柜。Docker官网给出的解释是Docker是世界领先的软件货柜运输平台。通俗来说就是Docker就是一个可以将软件打包在一个标准的“货柜”里，并可以轻松迁移的平台。","text":"Docker是什么？Docker的中文本意是码头工人，用于搬运货柜。Docker官网给出的解释是Docker是世界领先的软件货柜运输平台。通俗来说就是Docker就是一个可以将软件打包在一个标准的“货柜”里，并可以轻松迁移的平台。 Docker有什么作用？Docker容器打包软件到一个包含了所有运行所需环境（代码、运行时状态、系统工具、系统库——任何可以被安装在服务器上的环境）的文件系统里，这样软件无论被迁移到哪里都是同样的运行环境。通俗来说就是开发环境如果没有问题，用Docker打包成容器在服务器上运行，至少不会遇到环境问题。还有像我这样使用Mac开发的程序员，如果需要开发oracle数据库，本地是无法安装oracle的，可以通过docker运行一个oracle镜像。 Docker的特点轻量性运行在一台机器上的容器共享其操作系统内核，它们启动使用更少的内存。Docker的镜像文件可以通过分层的文件系统及共享的公共文件创建（说白了就是Docker的镜像文件可以在其他镜像基础上创建并且还可以共享使用其他镜像或操作系统的文件，这样镜像文件就很小），节省磁盘空间并提高下载效率。 开放性Docker容器基于开放标准，使容器能够在所有的主流Linux及windows或者其他设备的顶层运行。 默认安全性容器隔离彼此和基础架构应用，同时为应用程序提供了额外的保护层。 Docker容器与虚拟机比较虚拟机虚拟机系统包含应用程序、必要的二进制文件和库和一个完整的客体操作系统，所有这些加起来至少几十GB。 Docker容器Docker容器包含应用程序及其所需依赖，在主机操作系统上运行时，共享主机操作系统内核，每个容器都作为独立进程运行。Docker容器不限制设备型号等，可以运行在所有的设备上。 Docker安装Mac上安装请参阅Docker官网-Docker for Mac Windows上安装请参阅Docker官网-Docker for Windows Windows Server上安装请参阅Docker官网-Docker for Windows Server Linux上安装请参阅Docker官网-Docker for Linux AWS上安装请参阅Docker官网-Docker for AWS AZURE上安装请参阅Docker官网-Docker for AZURE Docker基础操作搜索镜像作为初学者和实用主义者，建议先学习使用别人的镜像，即方便又简单，网上有很多牛人制作好的镜像文件，我只需找到它们直接使用即可，可大大减少我们搭建环境的时间。 方法一：访问Docker Hub网站搜索 首先通过浏览器访问Docker Hub网站 在右上角的搜索栏中输入要搜做的镜像关键字，如：tomcat，返回如下页面： 选择需要使用镜像，如： 查看镜像详细 方法二：通过命令行搜索1$ docker search tomcat 下载镜像在命令行模式下键入以下命令1$ docker pull tomcat 其中“tomcat”是镜像名（name)，该命令可以在Docker Hub官网上搜索到的镜像详细中查看到 查看本地镜像列表在命令行模式下键入以下命令1$ docker images 其中“image id”为镜像编号 删除本地镜像在命令行模式下键入以下命令1$ docker rmi [image id] 其中“[image id]”替换为具体的镜像“image id”镜像删除时不能有该镜像的容器存在，无论是运行中的还是停止的 启动镜像成容器在命令行模式下键入以下命令1$ docker run -it --rm -p 8888:8080 tomcat:latest 其中“-it”代表开启交互功能，即容器内tomcat启动日志你将能看到。其中“—rm”代表当启动的容器停止后自动删除该容器（不是镜像哦）。其中“-p 8888:8080”代表将容器中的8080端口映射到本地机器的8888端口上，即我们可以通过localhost:8888端口访问到tomcat，甚至我可以改变本地端口来启动多个tomcat容器。最后的“tomcat:latest”代表启动的容器名称及其版本标签。还有很多其他的docker run的参数请查看docker官网-文档-run该条启动命令可以在Docker Hub上该镜像的详细说明中查看，其中会有多种启动方式说明 查看运行中的容器在命令行模式下键入以下命令1$ docker ps 其中“container id”为容器编号，下面的操作将与它相关 进入运行中的容器内部执行命令有时容器的设置并不能满足我们的需要，比如，我们可能需要增加一个tomcat用户，或是配置一个数据源连接池等，需要进入容器中修改参数，下面我们就介绍下如何进入容器中。在命令行模式下键入以下命令1$ docker exec -it [container id] /bin/bash 就可以进入容器内的命令行模式，其中“[container id]”在执行时替换为具体容器的container id 停止运行中的容器在命令行模式下键入以下命令1$ docker stop [container id] 其中“[container id]”在执行时替换为具体容器的“container id” 查看停止状态的容器在命令行模式下键入以下命令1$ docker ps -a 启动停止状态的容器在命令行模式下键入以下命令1$ docker start [container id] 其中“[container id]”在执行时替换为具体容器的“container id” 删除的容器在命令行模式下键入以下命令1$ docker rm [container id] 其中“[container id]”在执行时替换为具体容器的“container id” 提交容器成为新的镜像在命令行模式下键入以下命令1$ docker commit [container id] [your name]/[image name]:[tag] 其中“[container id]”在执行时替换为具体容器的“container id”其中“[your name]”在执行时替换为你的名字，方便大家知道是你做的镜像其中“[image name]”在执行时替换为你希望的镜像名称其中“[tag]”在执行时替换为你的镜像的版本，也可以不指定详细“docker commit”说明请参考docker官网-文档-commit 导出镜像在命令行模式下键入以下命令1docker save [image name] &gt; [local file name].tar 其中“[container id]”在执行时替换为具体镜像的名字其中“[local file name]”在执行时替换为你想取的本地文件名 载入镜像在命令行模式下键入以下命令1$ docker load &lt; [local file full name] 其中“[local file full name]” 在执行时替换为本地文件名（含扩展名）","categories":[{"name":"技术资料","slug":"技术资料","permalink":"http://shihd.github.io/categories/技术资料/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"http://shihd.github.io/tags/Docker/"}],"keywords":[{"name":"技术资料","slug":"技术资料","permalink":"http://shihd.github.io/categories/技术资料/"}]}]}