{"meta":{"title":"Explorer","subtitle":"探索者","description":null,"author":"Shihd","url":"http://shihd.github.io"},"pages":[{"title":"Categories","date":"2016-11-05T06:46:48.000Z","updated":"2016-11-05T06:12:44.000Z","comments":true,"path":"categories/index.html","permalink":"http://shihd.github.io/categories/index.html","excerpt":"","text":""},{"title":"Tags","date":"2016-11-05T06:46:48.000Z","updated":"2016-11-05T06:12:44.000Z","comments":true,"path":"tags/index.html","permalink":"http://shihd.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"技术资料——Maven入门及基础使用介绍","slug":"技术资料——Maven入门及基础使用介绍","date":"2016-11-08T08:59:38.000Z","updated":"2016-11-08T09:09:10.000Z","comments":true,"path":"2016/11/08/技术资料——Maven入门及基础使用介绍/","link":"","permalink":"http://shihd.github.io/2016/11/08/技术资料——Maven入门及基础使用介绍/","excerpt":"Maven是什么Maven的中文本意是“专家、内行”的意思。Apache Maven是一个主要针对Java的项目管理及综合工具，由Apache软件基金会所提供。Maven提供了开发人员构建一个完整的生命周期框架。开发团队可以自动完成项目的基础工具建设，Maven使用标准的目录结构和默认构建生命周期。在多个开发团队环境时，Maven可以设置按标准在非常短的时间里完成配置工作。由于大部分项目的设置都很简单，并且可重复使用，Maven让开发人员的工作更轻松，同时创建报表，检查，构建和测试自动化设置。Maven提供了开发人员的方式来管理： Builds Documentation Reporting Dependencies SCMs Releases Distribution mailing list概括地说，Maven简化和标准化项目建设过程。处理编译，分配，文档，团队协作和其他任务的无缝连接。 Maven增加可重用性并负责建立相关的任务。","text":"Maven是什么Maven的中文本意是“专家、内行”的意思。Apache Maven是一个主要针对Java的项目管理及综合工具，由Apache软件基金会所提供。Maven提供了开发人员构建一个完整的生命周期框架。开发团队可以自动完成项目的基础工具建设，Maven使用标准的目录结构和默认构建生命周期。在多个开发团队环境时，Maven可以设置按标准在非常短的时间里完成配置工作。由于大部分项目的设置都很简单，并且可重复使用，Maven让开发人员的工作更轻松，同时创建报表，检查，构建和测试自动化设置。Maven提供了开发人员的方式来管理： Builds Documentation Reporting Dependencies SCMs Releases Distribution mailing list概括地说，Maven简化和标准化项目建设过程。处理编译，分配，文档，团队协作和其他任务的无缝连接。 Maven增加可重用性并负责建立相关的任务。 Maven有什么作用 依赖管理减少对包的重复存储，最大限度的降低代码包大小 插件降低工作量，自动化构建 聚合和继承降低包的冲突及重复引用 Maven安装请参见Maven官网-Install注：在安装前需确认jdk环境已经安装配置完成。绝大多数IDE安装包中已集成Maven插件，这里就不介绍安装。注：默认情况下maven的本地仓库会存放在“～／.m2/“目录下。 Maven项目结构上图是一个Maven项目目录结构，“pom.xml”是maven主配置文件“项目对象模型”“src／main／java”是项目的源码目录，所有java源码需要在此目录中“src／main／resources”是项目的资源目录，所有配置资源需要在此目录中“src/test/java“是测试目录，所有的测试代码需要放在此目录中”target“为目标目录，编译及生成好的文件在此目录中，该目录由maven创建及管理，无需手工添加 常用maven命令 命令表达式 说明 clean ``` | 清除上次编译及生成文件 |123456789101112131415161718192021222324252627282930313233| ``` mvn compile ``` | 对项目进行编译 || ``` mvn test ``` | 执行全部测试用例 || ``` mvn package ``` | 对项目进行打包 || ``` mvn install ``` | 对项目进行打包并安装到本地仓库 |*注：maven的命令远远不止文中列出的，根据maven的生命周期及插件还有很多命令，可以通过访问官网查询，本文仅仅列出最基础最常用的命令*# pom编写基础```xml&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.simon.maven&lt;/groupId&gt; &lt;artifactId&gt;HelloWorld&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;type&gt;war&lt;/type&gt; &lt;name&gt;Maven Hello World Project&lt;/name&gt; &lt;dependencies&gt; &lt;!-- https://mvnrepository.com/artifact/junit/junit --&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;version&gt;4.12&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/project&gt; &lt;modal version&gt;值为4.0.0，使用maven3需要如此设置&lt;grounpId&gt;为组id，标识所属的组，一般java源码包命名参照groupId&lt;artifactId&gt;为构件id，一般为本项目名称&lt;version&gt;为版本号&lt;type&gt;为该项目打包类型&lt;dependencies&gt;为依赖标签，该标签下配置依赖每个依赖需要用&lt;dependency&gt;标签包围其中&lt;grounpId&gt;为需要依赖的构件包的组id其中&lt;artifactId&gt;为需要依赖的构件的id其中&lt;version&gt;为需要依赖的构件的版本号 构件依赖信息查询pom中引用的构件信息可以通过Maven仓库查询。在搜索框输入需要查询构件进行查询，如“spring jdbc”选择所需要的构建查询详细，选择需要引用的版本进入在页面里查看maven配置","categories":[{"name":"技术资料","slug":"技术资料","permalink":"http://shihd.github.io/categories/技术资料/"}],"tags":[{"name":"Maven","slug":"Maven","permalink":"http://shihd.github.io/tags/Maven/"}],"keywords":[{"name":"技术资料","slug":"技术资料","permalink":"http://shihd.github.io/categories/技术资料/"}]},{"title":"技术资料——Docker入门及基础操作","slug":"技术资料——Docker入门及基础操作","date":"2016-11-03T03:27:10.000Z","updated":"2016-11-05T06:44:03.000Z","comments":true,"path":"2016/11/03/技术资料——Docker入门及基础操作/","link":"","permalink":"http://shihd.github.io/2016/11/03/技术资料——Docker入门及基础操作/","excerpt":"Docker是什么？Docker的中文本意是码头工人，用于搬运货柜。Docker官网给出的解释是Docker是世界领先的软件货柜运输平台。通俗来说就是Docker就是一个可以将软件打包在一个标准的“货柜”里，并可以轻松迁移的平台。","text":"Docker是什么？Docker的中文本意是码头工人，用于搬运货柜。Docker官网给出的解释是Docker是世界领先的软件货柜运输平台。通俗来说就是Docker就是一个可以将软件打包在一个标准的“货柜”里，并可以轻松迁移的平台。 Docker有什么作用？Docker容器打包软件到一个包含了所有运行所需环境（代码、运行时状态、系统工具、系统库——任何可以被安装在服务器上的环境）的文件系统里，这样软件无论被迁移到哪里都是同样的运行环境。通俗来说就是开发环境如果没有问题，用Docker打包成容器在服务器上运行，至少不会遇到环境问题。还有像我这样使用Mac开发的程序员，如果需要开发oracle数据库，本地是无法安装oracle的，可以通过docker运行一个oracle镜像。 Docker的特点轻量性运行在一台机器上的容器共享其操作系统内核，它们启动使用更少的内存。Docker的镜像文件可以通过分层的文件系统及共享的公共文件创建（说白了就是Docker的镜像文件可以在其他镜像基础上创建并且还可以共享使用其他镜像或操作系统的文件，这样镜像文件就很小），节省磁盘空间并提高下载效率。 开放性Docker容器基于开放标准，使容器能够在所有的主流Linux及windows或者其他设备的顶层运行。 默认安全性容器隔离彼此和基础架构应用，同时为应用程序提供了额外的保护层。 Docker容器与虚拟机比较虚拟机虚拟机系统包含应用程序、必要的二进制文件和库和一个完整的客体操作系统，所有这些加起来至少几十GB。 Docker容器Docker容器包含应用程序及其所需依赖，在主机操作系统上运行时，共享主机操作系统内核，每个容器都作为独立进程运行。Docker容器不限制设备型号等，可以运行在所有的设备上。 Docker安装Mac上安装请参阅Docker官网-Docker for Mac Windows上安装请参阅Docker官网-Docker for Windows Windows Server上安装请参阅Docker官网-Docker for Windows Server Linux上安装请参阅Docker官网-Docker for Linux AWS上安装请参阅Docker官网-Docker for AWS AZURE上安装请参阅Docker官网-Docker for AZURE Docker基础操作搜索镜像作为初学者和实用主义者，建议先学习使用别人的镜像，即方便又简单，网上有很多牛人制作好的镜像文件，我只需找到它们直接使用即可，可大大减少我们搭建环境的时间。 方法一：访问Docker Hub网站搜索 首先通过浏览器访问Docker Hub网站 在右上角的搜索栏中输入要搜做的镜像关键字，如：tomcat，返回如下页面： 选择需要使用镜像，如： 查看镜像详细 方法二：通过命令行搜索1$ docker search tomcat 下载镜像在命令行模式下键入以下命令1$ docker pull tomcat 其中“tomcat”是镜像名（name)，该命令可以在Docker Hub官网上搜索到的镜像详细中查看到 查看本地镜像列表在命令行模式下键入以下命令1$ docker images 其中“image id”为镜像编号 删除本地镜像在命令行模式下键入以下命令1$ docker rmi [image id] 其中“[image id]”替换为具体的镜像“image id”镜像删除时不能有该镜像的容器存在，无论是运行中的还是停止的 启动镜像成容器在命令行模式下键入以下命令1$ docker run -it --rm -p 8888:8080 tomcat:latest 其中“-it”代表开启交互功能，即容器内tomcat启动日志你将能看到。其中“—rm”代表当启动的容器停止后自动删除该容器（不是镜像哦）。其中“-p 8888:8080”代表将容器中的8080端口映射到本地机器的8888端口上，即我们可以通过localhost:8888端口访问到tomcat，甚至我可以改变本地端口来启动多个tomcat容器。最后的“tomcat:latest”代表启动的容器名称及其版本标签。还有很多其他的docker run的参数请查看docker官网-文档-run该条启动命令可以在Docker Hub上该镜像的详细说明中查看，其中会有多种启动方式说明 查看运行中的容器在命令行模式下键入以下命令1$ docker ps 其中“container id”为容器编号，下面的操作将与它相关 进入运行中的容器内部执行命令有时容器的设置并不能满足我们的需要，比如，我们可能需要增加一个tomcat用户，或是配置一个数据源连接池等，需要进入容器中修改参数，下面我们就介绍下如何进入容器中。在命令行模式下键入以下命令1$ docker exec -it [container id] /bin/bash 就可以进入容器内的命令行模式，其中“[container id]”在执行时替换为具体容器的container id 停止运行中的容器在命令行模式下键入以下命令1$ docker stop [container id] 其中“[container id]”在执行时替换为具体容器的“container id” 查看停止状态的容器在命令行模式下键入以下命令1$ docker ps -a 启动停止状态的容器在命令行模式下键入以下命令1$ docker start [container id] 其中“[container id]”在执行时替换为具体容器的“container id” 删除的容器在命令行模式下键入以下命令1$ docker rm [container id] 其中“[container id]”在执行时替换为具体容器的“container id” 提交容器成为新的镜像在命令行模式下键入以下命令1$ docker commit [container id] [your name]/[image name]:[tag] 其中“[container id]”在执行时替换为具体容器的“container id”其中“[your name]”在执行时替换为你的名字，方便大家知道是你做的镜像其中“[image name]”在执行时替换为你希望的镜像名称其中“[tag]”在执行时替换为你的镜像的版本，也可以不指定详细“docker commit”说明请参考docker官网-文档-commit 导出镜像在命令行模式下键入以下命令1docker save [image name] &gt; [local file name].tar 其中“[container id]”在执行时替换为具体镜像的名字其中“[local file name]”在执行时替换为你想取的本地文件名 载入镜像在命令行模式下键入以下命令1$ docker load &lt; [local file full name] 其中“[local file full name]” 在执行时替换为本地文件名（含扩展名）","categories":[{"name":"技术资料","slug":"技术资料","permalink":"http://shihd.github.io/categories/技术资料/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"http://shihd.github.io/tags/Docker/"}],"keywords":[{"name":"技术资料","slug":"技术资料","permalink":"http://shihd.github.io/categories/技术资料/"}]}]}